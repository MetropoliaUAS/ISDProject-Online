{"version":3,"sources":["dashboard.js"],"names":[],"mappingsfile":"dashboard.js","sourcesContent":["(function ($, Vue, Chartist) {\n    \"use strict\";\n\n//    var chart_data = {\n//        labels: [@foreach($samplings as $value) , @endforeach],\n//    series: [[@foreach($samplings as $value) {{$value->sampled}}, @endforeach]]\n//};\n\n    function Dashboard () {\n        this.products = [];\n        this.genericSensorsRepo = new GenericSensorsRepo();\n        this.selection = new Selection();\n\n        this.vue = this.createVue();\n        this.chart = null;\n    }\n\n    Dashboard.prototype.createVue = function () {\n        var self = this;\n\n        return new Vue({\n            el: '#products',\n            data: {\n                products: self.products,\n                selection: self.selection\n            },\n            methods: {\n                onSensorClick: function (sensor) {\n                    dashboard.selection.selectSensor(sensor);\n                },\n                genericSensorAlias: function (genericSensorId) {\n                    var genericSensor = dashboard.genericSensorsRepo.find(genericSensorId);\n                    return genericSensor ? genericSensor.alias : \"\";\n                }\n            }\n        });\n    };\n\n    Dashboard.prototype.run = function () {\n        var self = this,\n            productsUrl = window.location.origin + \"/api/products\";\n\n        $.getJSON(productsUrl, null, function (data) {\n            $.each(data, function (index, item) {\n                self.products.push( new Product(item) );\n            });\n        });\n\n        this.chart = new Chart();\n    };\n\n    Dashboard.prototype.productIdBySensor = function (sensor) {\n        var foundProduct = null,\n            sensorId = sensor.id || sensor;\n\n\n        $.each(this.products, function (index, product) {\n            $.each(product.sensors, function (index, sensor) {\n                if (sensor.id === sensorId) {\n                    foundProduct = product;\n                    return false;\n                }\n            });\n\n            if (foundProduct) return false;\n        });\n\n        return foundProduct;\n    };\n\n    Dashboard.prototype.selectionChange = function () {\n        this.getNewSamples();\n    };\n\n    Dashboard.prototype.getNewSamples = function () {\n        var self = this,\n            samplesUrl, requestParams;\n\n        samplesUrl = window.location.origin + \"/api/samplings/show/\" + this.selection.selectedProductId;\n        requestParams = {\n            generic_sensor_id: this.selection.selectedGenericSensorId,\n            start: \"2001-01-01\",\n            limit: 10\n        };\n        // change second param to have a better filter\n        $.getJSON(samplesUrl, requestParams, function (data) {\n            self.chart.update( new GraphData(data) );\n        });\n    };\n\n    function Selection () {\n        this.selectedSensorId = null;\n        this.selectedProductId = null;\n        this.selectedGenericSensorId = null;\n    }\n\n    Selection.prototype.selectSensor = function (sensor) {\n        this.selectedSensorId = sensor.id;\n        this.selectedGenericSensorId = sensor.generic_sensor_id;\n        this.selectedProductId = dashboard.productIdBySensor(sensor).id;\n\n        dashboard.selectionChange();\n    };\n\n    function Product (raw) {\n        var self = this;\n\n        this.id = raw.id;\n        this.sensors = [];\n\n        $.each(raw.sensors, function (index, rawSensor) {\n            self.sensors.push( new Sensor(rawSensor) );\n        });\n    }\n\n    function Sensor (raw) {\n        this.id = raw.id;\n        this.generic_sensor_id = raw.generic_sensor_id;\n        this.generic_sensor = dashboard.genericSensorsRepo.findOrCreateFromRaw(raw.generic_sensor);\n    }\n\n    function GenericSensor (raw) {\n        this.id = raw.id;\n        this.unit = raw.unit;\n        this.alias = raw.alias;\n        this.symbol = raw.symbol;\n        this.unit = raw.unit;\n        this.range = {\n            low: raw.range.split('-')[0],\n            high: raw.range.split('-')[1]\n        };\n    }\n\n    // used to not duplicate object for nothing\n    function GenericSensorsRepo () {\n        this.genericSensors = {};\n    }\n\n    GenericSensorsRepo.prototype.findOrCreateFromRaw = function (raw) {\n        if (this.genericSensors[raw.id]) return this.genericSensors[raw.id];\n\n        var newGenericSensor = new GenericSensor(raw);\n        this.genericSensors[newGenericSensor.id] = newGenericSensor;\n        return newGenericSensor;\n    };\n\n    GenericSensorsRepo.prototype.find = function (id) {\n        return this.genericSensors[id];\n    };\n\n    function Chart () {\n        var chart_options = {\n            fullWidth: true,\n            height: 500,\n\n            showArea: false,\n            showPoint: false,\n            chartPadding: {\n                right: 40\n            },\n            axisX: {\n                showGrid: false\n            }\n        };\n        this.chart = new Chartist.Line('#chart', null, chart_options);\n    }\n\n    Chart.prototype.buildNewOpts = function () {\n        var sensorUnit;\n\n        sensorUnit = dashboard.genericSensorsRepo.find(\n            dashboard.selection.selectedGenericSensorId\n        ).unit;\n\n        return {\n            axisX: {\n                labelInterpolationFnc: function (value, index, data) {\n                    var modulus = Math.round(data.length / 15);\n\n                    if (modulus == 0) return value;\n                    return index % modulus === 0 ? value : '';\n                }\n            },\n            axisY: {\n                // Adding units to the values\n                labelInterpolationFnc: function(value) {\n                    return value + \" \" + sensorUnit;\n                }\n            }\n        }\n    };\n\n    Chart.prototype.update = function (graphData) {\n        var newData = graphData.getData(),\n            newOpts = this.buildNewOpts();\n\n        // We have to fix it, since chartist has an error if we have only 1 value.\n        // So the workaround is to duplicate the labels and value\n        if (graphData.count() == 1) {\n            newData = this.fixNewData(newData);\n        }\n        this.chart.update(newData, newOpts, true);\n    };\n\n    Chart.prototype.fixNewData = function (newData) {\n        newData.labels.push(newData.labels[0]);\n        newData.series[0].push(newData.series[0][0]);\n        return newData;\n    };\n\n    function GraphData (raw) {\n        var self = this;\n\n        self.labels = [];\n        self.serie = [];\n\n        $.each(raw, function (index, rawSample) {\n            self.labels.push(rawSample.created_at);\n            self.serie.push(rawSample.sampled);\n        });\n    }\n\n    GraphData.prototype.getData = function () {\n        return {\n            labels: this.labels,\n            series: [this.serie]\n        };\n    };\n\n    GraphData.prototype.count = function () {\n        return this.serie.length;\n    };\n\n    $(document).on(\"ready\", function () {\n        window.dashboard = new Dashboard();\n        dashboard.run();\n    });\n})(jQuery, Vue, Chartist);"],"sourceRoot":"/source/"}